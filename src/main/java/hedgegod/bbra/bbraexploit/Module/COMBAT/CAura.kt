package hedgegod.bbra.bbraexploit.Module.COMBAT

import hedgegod.bbra.bbraexploit.BBraExploit
import hedgegod.bbra.bbraexploit.Module.Module
import hedgegod.bbra.bbraexploit.utils.CrystalUtil
import hedgegod.bbra.bbraexploit.utils.EntityUtil
import hedgegod.bbra.bbraexploit.utils.MainUtils
import net.minecraft.entity.item.EntityEnderCrystal
import net.minecraft.entity.player.EntityPlayer
import net.minecraft.util.EnumHand
import net.minecraft.util.math.BlockPos
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent
import net.minecraftforge.fml.common.gameevent.TickEvent
import org.lwjgl.input.Keyboard
import sun.applet.Main

class CAura : Module("CAura", Keyboard.KEY_M, Module.Category.COMBAT) {

    var placeHand = EnumHand.OFF_HAND
    var placeSwing = true
    var breakSwing = false
    var range = 5
    var multiplace = 2
    var rotate = false

    //////////////////////////////// vars for stuff
    var target: EntityPlayer? = getTarget(range)
    var positions = mutableListOf<BlockPos>()

    @SubscribeEvent
    fun doCrystalAura(event: TickEvent.ServerTickEvent) {
        target = getTarget(this.range)

        if (target != null) {
            getPos()
            doPlace()
            doBreak()
        }
    }

    private fun doPlace() {
        try {
            for (i in 0 until multiplace - 1) {
                CrystalUtil.placeCrystal(positions[i], placeHand, this.placeSwing, rotate)  // place on block
            }
        } catch (e: Exception) {
        }
    }

    private fun doBreak() {
        try {
            for (i in MainUtils.getCrystals(this.range.toFloat())) {
                EntityUtil.attackEntity(i, !breakSwing)
            }
        } catch (e: Exception) {
        }

    }

    private fun getTarget(range: Int): EntityPlayer? {
        try {
            return MainUtils.getEnemyPlayer(range.toDouble())

        } catch (e: Exception) {
        }
        return null
    }

    private fun getPos() {
        positions = CrystalUtil.possiblePlacePositions(range.toFloat(), false, false)
    }

}