package hedgegod.bbra.bbraexploit.Module.COMBAT;

import hedgegod.bbra.bbraexploit.BBraExploit;
import hedgegod.bbra.bbraexploit.utils.EntityUtil;
import hedgegod.bbra.bbraexploit.utils.other.FriendsManager;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemSword;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Keyboard;

import hedgegod.bbra.bbraexploit.Module.Module;
import yea.hedgegod.clickgui.Setting;

import javax.annotation.Nullable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;

public class KillAura extends Module {


    private boolean isTraget;

    public KillAura() {
        super("KillAura", Keyboard.KEY_K, Category.COMBAT);

        ArrayList<String> options = new ArrayList<>();

        options.add("Rage");
        options.add("Rotation");

        ArrayList<String> options2 = new ArrayList<>();

        options2.add("Health");
        options2.add("Closest");

        BBraExploit.instance.sManager.rSetting(new Setting("Mode", this, options, "Mode"));
        BBraExploit.instance.sManager.rSetting(new Setting("Range", this, 4.2, 1.0, 6.0, false));

        //targeting settings
        BBraExploit.instance.sManager.rSetting(new Setting("Targeting", this, options2, "Targeting"));
        BBraExploit.instance.sManager.rSetting(new Setting("ThroughWalls", this , false));

        BBraExploit.instance.sManager.rSetting(new Setting("OnlySword", this, false));

        BBraExploit.instance.sManager.rSetting(new Setting("Player", this, true));
        BBraExploit.instance.sManager.rSetting(new Setting("Mobs", this, false));
        BBraExploit.instance.sManager.rSetting(new Setting("Hostiles", this, false));
    }

    int ticksEnded = 0;

    private Entity getTarget() {
        Entity target = null;
        double distance = BBraExploit.instance.sManager.getSettingByName(this.name, "Range").getValDouble();
        double maxHealth = 36.0;
        for (Entity entity : mc.world.loadedEntityList) {
            if (BBraExploit.instance.sManager.getSettingByName(this.name, "Player").getValBoolean() && entity instanceof EntityPlayer && !EntityUtil.isntValid(entity, distance) && !FriendsManager.isFriend(entity.getName())) {
                if (!BBraExploit.instance.sManager.getSettingByName(this.name, "Walls").getValBoolean() && !mc.player.canEntityBeSeen(entity)) continue;
                if (target == null) {
                    target = entity;
                    distance = mc.player.getDistanceSq(entity);
                    maxHealth = EntityUtil.getHealth(entity);
                    continue;
                }
                else if (BBraExploit.instance.sManager.getSettingByName(this.name, "Targeting").getValString() == "Health" && mc.player.getDistanceSq(entity) < distance) {
                    target = entity;
                    distance = mc.player.getDistanceSq(entity);
                    maxHealth = EntityUtil.getHealth(entity);
                }
                else if (BBraExploit.instance.sManager.getSettingByName(this.name, "Targeting").getValString() == "Health" || !((double) EntityUtil.getHealth(entity) < maxHealth))
                    continue;
                target = entity;
                distance = mc.player.getDistanceSq(entity);
                maxHealth = EntityUtil.getHealth(entity);
            }
            if ((BBraExploit.instance.sManager.getSettingByName(this.name, "Mobs").getValBoolean() && entity instanceof EntityMob && !EntityUtil.isntValid(entity, distance)) ||
                    (BBraExploit.instance.sManager.getSettingByName(this.name, "Hostiles").getValBoolean() && entity instanceof EntityAnimal && !EntityUtil.isntValid(entity, distance))){
                target = entity;
                distance = mc.player.getDistanceSq(entity);
            }
        }
        return target;
    }

    @SubscribeEvent
    public void onUpdate(TickEvent.PlayerTickEvent e) throws Exception{
        String mode = BBraExploit.instance.sManager.getSettingByName(this.name, "Mode").getValString();
        double range = BBraExploit.instance.sManager.getSettingByName(this.name, "Range").getValDouble();
        boolean onlyCrits = Criticals.doCrits;

        Entity KAtarget  = this.getTarget();
        if(KAtarget != null){
            isTraget = ((BBraExploit.instance.sManager.getSettingByName(this.name, "Player").getValBoolean() && KAtarget instanceof EntityPlayer) ||
                    (BBraExploit.instance.sManager.getSettingByName(this.name, "Mobs").getValBoolean() && KAtarget instanceof EntityMob) ||
                    (BBraExploit.instance.sManager.getSettingByName(this.name, "Hostiles").getValBoolean() && KAtarget instanceof EntityAnimal));
            if(this.isTraget) {
                if (!KAtarget.isDead) {
                    //Crits detection and realization
                    if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "MiniJump") && mc.player.onGround){
                        mc.player.motionY = 0.15;
                    }
                    else if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "Jump") && mc.player.onGround) {
                        mc.player.jump();
                    }
                    else if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "Packet") && mc.player.onGround){
                        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX + mc.player.motionX, mc.player.posY + 0.2, mc.player.posZ + mc.player.motionZ, false));
                    }
                }
                //attack
                if(BBraExploit.instance.sManager.getSettingByName(this.name, "OnlySword").getValBoolean() && !(mc.player.getHeldItemMainhand().getItem() instanceof ItemSword)) return;
                if(BBraExploit.instance.sManager.getSettingByName(this.name, "Mode").getValString() == "Rotation") {
                    EntityUtil.lookAtEntity(KAtarget);
                } else if (BBraExploit.instance.sManager.getSettingByName(this.name, "Mode").getValString() == "Rage") {
                    EntityUtil.lookAtEntity(KAtarget);
                }
                if (Minecraft.getMinecraft().player.getCooledAttackStrength(0) == 1) {
                    EntityUtil.attackEntity(KAtarget, false, true);
                }
            }
        }
    }
}
