package hedgegod.bbra.bbraexploit.Module.COMBAT;

import hedgegod.bbra.bbraexploit.Module.Module;
import hedgegod.bbra.bbraexploit.BBraExploit;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Container;
import net.minecraft.item.*;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Keyboard;
import yea.hedgegod.clickgui.Setting;

import java.util.ArrayList;
import java.util.Objects;

public class Offhand extends Module {
    static Minecraft mc = Minecraft.getMinecraft();
    public Offhand() {
        super("Offhand", Keyboard.KEY_NONE, Category.COMBAT);

        ArrayList<String> options = new ArrayList<>();

        options.add("Crystal");
        options.add("Totem");
        options.add("Golden Apple");

        BBraExploit.instance.sManager.rSetting(new Setting("Mode", this, options, "Mode"));

        BBraExploit.instance.sManager.rSetting(new Setting("TotemHP", this, 16, 0, 36, true));
        BBraExploit.instance.sManager.rSetting(new Setting("SwordGap", this, true));
        BBraExploit.instance.sManager.rSetting(new Setting("CrystalCheck", this, false));
    }

    @SubscribeEvent
    public void onPlayerTick(TickEvent.PlayerTickEvent e) {
        String Mode = BBraExploit.instance.sManager.getSettingByName(this.name, "Mode").getValString();
        if (mc.currentScreen == null || mc.currentScreen instanceof GuiInventory) {

            if (Objects.equals(Mode, "Crystal")) {
                if (mc.player.getHealth() + mc.player.getAbsorptionAmount() >= BBraExploit.instance.sManager.getSettingByName(this.name, "TotemHP").getValDouble() &&
                        !(((BBraExploit.instance.sManager.getSettingByName(this.name, "SwordGap").getValBoolean() &&
                                mc.player.getHeldItemMainhand().getItem() instanceof ItemSword)) &&
                                mc.gameSettings.keyBindUseItem.isKeyDown() &&
                                BBraExploit.instance.sManager.getSettingByName(this.name, "SwordGap").getValBoolean())) {
                    Item offhand = mc.player.getHeldItemOffhand().getItem();
                    if (getItemCount(mc.player.inventoryContainer, Items.END_CRYSTAL) > 0 && !offhand.equals(Items.END_CRYSTAL)) {
                        swap(getItemSlot(mc.player.inventoryContainer, Items.END_CRYSTAL), 45);
                    }
                    return;
                }
            }if (Objects.equals(Mode, "Golden Apple")) {
                if (mc.player.getHealth() + mc.player.getAbsorptionAmount() >= BBraExploit.instance.sManager.getSettingByName(this.name, "TotemHP").getValDouble()) {
                    Item offhand = mc.player.getHeldItemOffhand().getItem();
                    if (getItemCount(mc.player.inventoryContainer, Items.GOLDEN_APPLE) > 0 && !offhand.equals(Items.GOLDEN_APPLE)) {
                        swap(getItemSlot(mc.player.inventoryContainer, Items.GOLDEN_APPLE), 45);
                    }
                }
            }if (Objects.equals(Mode, "Totem")) {
                if (mc.player.getHealth() + mc.player.getAbsorptionAmount() >= BBraExploit.instance.sManager.getSettingByName(this.name, "TotemHP").getValDouble() &&
                        !(((BBraExploit.instance.sManager.getSettingByName(this.name, "SwordGap").getValBoolean() &&
                                mc.player.getHeldItemMainhand().getItem() instanceof ItemSword)) &&
                                mc.gameSettings.keyBindUseItem.isKeyDown() &&
                                BBraExploit.instance.sManager.getSettingByName(this.name, "SwordGap").getValBoolean())) {
                    Item offhand = mc.player.getHeldItemOffhand().getItem();
                    if (getItemCount(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING) > 0 && !offhand.equals(Items.TOTEM_OF_UNDYING)) {
                        swap(getItemSlot(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING), 45);
                    }
                }
            }if (BBraExploit.instance.sManager.getSettingByName(this.name, "SwordGap").getValBoolean() &&
                    mc.player.getHealth() + mc.player.getAbsorptionAmount() >= BBraExploit.instance.sManager.getSettingByName(this.name, "TotemHP").getValDouble() &&
                    mc.player.getHeldItemMainhand().getItem() instanceof ItemSword &&
                    mc.gameSettings.keyBindUseItem.isKeyDown()
                    //Mouse.isButtonDown(3)
            )
            {
                Item offhand = mc.player.getHeldItemOffhand().getItem();
                if (getItemCount(mc.player.inventoryContainer, Items.GOLDEN_APPLE) > 0 && !offhand.equals(Items.GOLDEN_APPLE)) {
                    swap(getItemSlot(mc.player.inventoryContainer, Items.GOLDEN_APPLE), 45);
                }
            }
        }if (mc.player.getHealth() + mc.player.getAbsorptionAmount() <= BBraExploit.instance.sManager.getSettingByName(this.name, "TotemHP").getValDouble()) {
            Item offhand = mc.player.getHeldItemOffhand().getItem();

            if (getItemCount(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING) > 0 && !offhand.equals(Items.TOTEM_OF_UNDYING)) {
                //swap(mc.player.inventory.currentItem, 45); it works too slow and may cause to die
                swap(getItemSlot(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING), 45);
            }
        }
    }


    public static int getItemCount(Container container, Item item) {
        int itemCount = 0;
        for (int i = 0; i < 45; ++i) {
            if (container.getSlot(i).getHasStack()) {
                final ItemStack is = container.getSlot(i).getStack();
                if (is.getItem() == item) {
                    itemCount += is.getCount();
                }
            }
        }
        return itemCount;
    }

    public static void swap(int slot, int hotbarNum) {
        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, slot, 0, ClickType.PICKUP, mc.player);
        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, hotbarNum, 0, ClickType.PICKUP, mc.player);
        mc.playerController.windowClick(mc.player.inventoryContainer.windowId, slot, 0, ClickType.PICKUP, mc.player);
        mc.playerController.updateController();
    }

    public static int getItemSlot(Container container, Item item) {
        int slot = 0;
        for (int i = 9; i < 45; ++i) {
            if (container.getSlot(i).getHasStack()) {
                ItemStack is = container.getSlot(i).getStack();
                if (is.getItem() == item)
                    slot = i;
            }
        }
        return slot;
    }

    public int findExpInHotbar() {
        int slot = 0;
        for (int i = 0; i < 9; i++) {
            if (mc.player.inventory.getStackInSlot(i).getItem() == Items.ENDER_PEARL) {
                slot = i;
                break;
            }
        }
        return slot;
    }

}

