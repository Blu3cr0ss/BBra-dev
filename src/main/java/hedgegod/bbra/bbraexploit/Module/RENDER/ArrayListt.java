package hedgegod.bbra.bbraexploit.Module.RENDER;

import hedgegod.bbra.bbraexploit.BBraExploit;
import hedgegod.bbra.bbraexploit.Client;
import hedgegod.bbra.bbraexploit.Module.Module;
import hedgegod.bbra.bbraexploit.utils.RenderUtils;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.lwjgl.input.Keyboard;
import yea.hedgegod.clickgui.Setting;

import java.awt.*;
import java.util.ArrayList;

import static hedgegod.bbra.bbraexploit.UI.ui.rainbow;

public class ArrayListt extends Module {
    public ArrayListt(){
        super("Array List", Keyboard.KEY_NUMPAD7, Category.RENDER);

        ArrayList<String> options = new ArrayList<>();

        options.add("Rainbow");
        options.add("Boxes");

        BBraExploit.instance.sManager.rSetting(new Setting("Mode", this, options, "Mode"));
    }

    @SubscribeEvent
    public void onRender(RenderGameOverlayEvent.Post e) {
        switch (e.getType()) {
            case TEXT:
                int y = 10;
                final int[] counter = {1};

                Minecraft mc = Minecraft.getMinecraft();
                FontRenderer fr = mc.fontRenderer;
                ScaledResolution sr = new ScaledResolution(mc);

                boolean isRainbow = (BBraExploit.instance.sManager.getSettingByName(this.name, "Mode").getValString() == "Rainbow");
                boolean hasRect = isRainbow;
                boolean isRectangled = !isRainbow;
                int color = -1;
                int offset = 10;

                if (toggled) {
                    for (Module module : Client.modules) {
                        if (module.toggled) {

                            if (isRainbow) {
                                color = rainbow(counter[0] * 50);
                            } else {
                                color = Color.orange.getRGB();
                            }

                            if(hasRect){
                                Gui.drawRect(sr.getScaledWidth(), y, sr.getScaledWidth() - 2, y + 10, color);
                            }

                            if(isRectangled){
                                offset = 11;
                                RenderUtils.drawRoundedRect(sr.getScaledWidth() - 6 - fr.getStringWidth(module.name), y, sr.getScaledWidth(), y + 10, 5, new Color(0x8653E1).hashCode());
                            }
                            fr.drawStringWithShadow(module.name, sr.getScaledWidth() - 3 - fr.getStringWidth(module.name), y, color);
                            y += offset;
                            counter[0]++;

                        }
                    }
                }
            default:
                break;
        }
    }
}
