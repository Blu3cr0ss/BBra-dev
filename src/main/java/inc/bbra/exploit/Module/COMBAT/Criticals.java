package inc.bbra.exploit.Module.COMBAT;

import inc.bbra.exploit.BBraExploit;
import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.utils.ChatUtil;
import inc.bbra.exploit.utils.other.FriendsManager;
import inc.bbra.newclickgui.Setting;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.RayTraceResult;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Keyboard;

import java.io.IOException;
import java.util.ArrayList;

public class Criticals extends Module{
    public Criticals(){
        super ("Criticals", Keyboard.KEY_NONE, Category.COMBAT);

        ArrayList<String> options = new ArrayList<>();

        options.add("MiniJump");
        options.add("Jump");
        options.add("Packet");

        BBraExploit.instance.sManager.rSetting(new Setting("Mode", this, options, "Mode"));
    }
    public static boolean doCrits = false;

    @Override
    public void onEnable() throws IOException {
        doCrits = true;
        super.onEnable();
    }

    @Override
    public void onDisable() throws IOException {
        doCrits = false;
        super.onDisable();
    }

    @SubscribeEvent
    public void onTick(TickEvent.PlayerTickEvent e){
        if(doCrits){
            RayTraceResult objectMouseOver = Minecraft.getMinecraft().objectMouseOver;
            if(objectMouseOver != null && objectMouseOver.typeOfHit == RayTraceResult.Type.ENTITY){
                Entity entity = objectMouseOver.entityHit;
                if (!FriendsManager.isFriend(entity.getName()) && mc.gameSettings.keyBindAttack.isKeyDown()) {
                    Criticals.doCrit();
                }
            }
        }
    }

    public static void doMiniJump(){
        if (Minecraft.getMinecraft().player.onGround)
            Minecraft.getMinecraft().player.motionY = 0.15;
    }

    public static void doJump(){
        if (Minecraft.getMinecraft().player.onGround){
            Minecraft.getMinecraft().player.onGround = false;
            Minecraft.getMinecraft().player.jump();
            Minecraft.getMinecraft().player.onGround = true;
        }
    }

    public static void doPacketJump(){
        Minecraft mc = Minecraft.getMinecraft();
        if (Minecraft.getMinecraft().player.onGround)
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.2, mc.player.posZ, false));
    }

    public static void doCrit(){
        Minecraft mc = Minecraft.getMinecraft();
        if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "MiniJump") && mc.player.onGround){
            Criticals.doMiniJump();
        }
        else if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "Jump") && mc.player.onGround) {
            Criticals.doJump();
        }
        else if (Criticals.doCrits && (BBraExploit.instance.sManager.getSettingByName("Criticals", "Mode").getValString() == "Packet") && mc.player.onGround){
            Criticals.doPacketJump();
        }
    }
}
