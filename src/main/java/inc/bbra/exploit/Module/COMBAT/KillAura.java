package inc.bbra.exploit.Module.COMBAT;

import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.clickgui.modules.settings.BoolSetting;
import inc.bbra.exploit.clickgui.modules.settings.FloatSetting;
import inc.bbra.exploit.clickgui.modules.settings.ModeSetting;
import inc.bbra.exploit.clickgui.modules.settings.PageSetting;
import inc.bbra.exploit.utils.EntityUtil;
import inc.bbra.exploit.utils.other.FriendsManager;
import inc.bbra.exploit.utils.other.array;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.passive.EntityAnimal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemSword;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Keyboard;

public class KillAura extends Module {

    private boolean isTraget;

    public KillAura() {
        super("KillAura", Keyboard.KEY_K, Category.COMBAT);
    }

    PageSetting critPage = new PageSetting(this, "Crits");
    BoolSetting crits = new BoolSetting(this, "Do crits", critPage, false);
    ModeSetting critsMode = new ModeSetting(this, "Crits Mode", critPage, array.Companion.of("MiniJump", "Jump", "Packet"));
    PageSetting targetingPage = new PageSetting(this, "Targeting");
    BoolSetting througWalls = new BoolSetting(this, "Through walls", false);
    ModeSetting targeting = new ModeSetting(this, "Targeting", targetingPage, array.Companion.of("Health", "Closest"));
    BoolSetting players = new BoolSetting(this, "Players", targetingPage, true);
    BoolSetting mobs = new BoolSetting(this, "Mobs", targetingPage, false);
    BoolSetting hostiles = new BoolSetting(this, "Hostiles", targetingPage, false);
    ModeSetting mode = new ModeSetting(this, "Mode", array.Companion.of("Rage","Rotation" ));
    FloatSetting range = new FloatSetting(this, "Range", 4.2f,1f,7f);
    BoolSetting onlySword = new BoolSetting(this, "Only sword",true);


    int ticksEnded = 0;

    private Entity getTarget() throws Exception {
        Entity target = null;
        double distance = range.getVal( );

        double maxHealth = 36.0;
        //for (Entity entity : mc.world.loadedEntityList) {
        for (int i = 0; i < mc.world.loadedEntityList.size( ); i++) {
            Entity entity = mc.world.loadedEntityList.get(i);
            if (players.getVal() && entity instanceof EntityPlayer && !EntityUtil.isntValid(entity, distance) && !FriendsManager.isFriend(entity.getName( ))) {
                if (!througWalls.getVal() && !mc.player.canEntityBeSeen(entity))
                    continue;
                if (target == null) {
                    target = entity;
                    distance = mc.player.getDistance(entity);
                    maxHealth = EntityUtil.getHealth(entity);
                    continue;
                } else if (targeting.getVal() == "Health" && mc.player.getDistanceSq(entity) < distance) {
                    target = entity;
                    distance = mc.player.getDistance(entity);
                    maxHealth = EntityUtil.getHealth(entity);
                } else if (targeting.getVal() == "Health" || !((double) EntityUtil.getHealth(entity) < maxHealth))
                    continue;
                target = entity;
                distance = mc.player.getDistance(entity);
                maxHealth = EntityUtil.getHealth(entity);
            }
            if ((mobs.getVal() && entity instanceof EntityMob && !EntityUtil.isntValid(entity, distance)) ||
                    (hostiles.getVal() && entity instanceof EntityAnimal && !EntityUtil.isntValid(entity, distance))) {
                target = entity;
                distance = mc.player.getDistance(entity);
            }
        }
        return target;
    }

    @SubscribeEvent
    public void onUpdate(TickEvent.PlayerTickEvent e) throws Exception {
        String mode = this.mode.getVal();
        double range = this.range.getVal();
        boolean onlyCrits = crits.getVal( );

        Entity KAtarget = this.getTarget( );
        if (KAtarget != null) {
            isTraget = ((players.getVal() && KAtarget instanceof EntityPlayer) ||
                    (mobs.getVal() && KAtarget instanceof EntityMob) ||
                    (hostiles.getVal() && KAtarget instanceof EntityAnimal));
            if (this.isTraget) {
                if (!KAtarget.isDead) {
                    //Crits detection and realization
                    Criticals.doCrit(critsMode.getVal());
                }
                //attack
                if (onlySword.getVal() && !(mc.player.getHeldItemMainhand( ).getItem( ) instanceof ItemSword))
                    return;
                if (mode == "Rotation") {
                    EntityUtil.lookAtEntity(KAtarget);
                } else if (mode == "Rage") {
                    EntityUtil.lookAtEntity(KAtarget);
                }
                if (Minecraft.getMinecraft( ).player.getCooledAttackStrength(0) == 1) {
                    EntityUtil.attackEntity(KAtarget, false, true);
                }
            }
        }
    }
}
