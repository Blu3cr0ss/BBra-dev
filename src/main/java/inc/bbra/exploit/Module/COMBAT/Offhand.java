package inc.bbra.exploit.Module.COMBAT;

import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.clickgui.modules.settings.BoolSetting;
import inc.bbra.exploit.clickgui.modules.settings.IntSetting;
import inc.bbra.exploit.clickgui.modules.settings.ModeSetting;
import inc.bbra.exploit.utils.CrystalUtil;
import inc.bbra.exploit.utils.InventoryUtil;
import inc.bbra.exploit.utils.MainUtils;
import inc.bbra.exploit.utils.other.array;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemSword;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.input.Keyboard;

import java.util.Objects;

public class Offhand extends Module {
    static Minecraft mc = Minecraft.getMinecraft( );

    public Offhand() {
        super("Offhand", Keyboard.KEY_NONE, Category.COMBAT);
    }

    ModeSetting mode = new ModeSetting(this,"Mode", array.Companion.of("Crystal","Totem","Golden Apple"));

    IntSetting totemHP = new IntSetting(this,"Totem HP",16,1,36);
    BoolSetting swordGap = new BoolSetting(this,"Sword-Gap",true);
    BoolSetting crystalCheck = new BoolSetting(this,"Crystal check",true);



    private final int OFFHAND = 45;

    float crystalsDamage = 0;

    @SubscribeEvent
    public void onPlayerTick(TickEvent.PlayerTickEvent e) {
        try {
            crystalsDamage = 0;
            String Mode = mode.getVal();
            if (mc.currentScreen == null || mc.currentScreen instanceof GuiInventory) {


                if (crystalCheck.getVal()){
                    for (EntityEnderCrystal crystal : MainUtils.getCrystals(12)){
                        crystalsDamage += CrystalUtil.calculateDamage(crystal, mc.player, false);
                    }
                }

                if (Objects.equals(Mode, "Crystal")) {
                    if (mc.player.getHealth( ) + mc.player.getAbsorptionAmount( ) >= totemHP.getVal( ) &&
                            !(((swordGap.getVal() &&
                                    mc.player.getHeldItemMainhand( ).getItem( ) instanceof ItemSword)) &&
                                    (mc.player.getHealth() + mc.player.getAbsorptionAmount() > crystalsDamage) &&
                                    mc.gameSettings.keyBindUseItem.isKeyDown( ) &&
                                    swordGap.getVal())) {
                        Item offhand = mc.player.getHeldItemOffhand( ).getItem( );
                        if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Items.END_CRYSTAL) > 0 && !offhand.equals(Items.END_CRYSTAL)) {
                            InventoryUtil.swapSlots(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Items.END_CRYSTAL), OFFHAND);
                        }
                        return;
                    }
                }
                if (Objects.equals(Mode, "Golden Apple")) {
                    if (mc.player.getHealth( ) + mc.player.getAbsorptionAmount( ) >= totemHP.getVal( ) &&
                            !(mc.player.getHealth() + mc.player.getAbsorptionAmount() <= crystalsDamage)) {
                        Item offhand = mc.player.getHeldItemOffhand( ).getItem( );
                        if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Items.GOLDEN_APPLE) > 0 && !offhand.equals(Items.GOLDEN_APPLE)) {
                            InventoryUtil.swapSlots(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Items.GOLDEN_APPLE), OFFHAND);
                        }
                    }
                }
                if (Objects.equals(Mode, "Totem")) {
                    if (mc.player.getHealth( ) + mc.player.getAbsorptionAmount( ) >= totemHP.getVal( ) &&
                            !(((swordGap.getVal( ) &&
                                    mc.player.getHeldItemMainhand( ).getItem( ) instanceof ItemSword)) &&
                                    mc.gameSettings.keyBindUseItem.isKeyDown( ) &&
                                    swordGap.getVal( ))) {
                        Item offhand = mc.player.getHeldItemOffhand( ).getItem( );
                        if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING) > 0 && !offhand.equals(Items.TOTEM_OF_UNDYING)) {
                            InventoryUtil.swapSlots(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING), OFFHAND);
                        }
                    }
                }
                if (swordGap.getVal() &&
                        mc.player.getHealth( ) + mc.player.getAbsorptionAmount( ) >= totemHP.getVal( ) &&
                        mc.player.getHeldItemMainhand( ).getItem( ) instanceof ItemSword &&
                        !(mc.player.getHealth() + mc.player.getAbsorptionAmount() <= crystalsDamage) &&
                        mc.gameSettings.keyBindUseItem.isKeyDown( )
                    //Mouse.isButtonDown(3)
                ) {
                    Item offhand = mc.player.getHeldItemOffhand( ).getItem( );
                    if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Items.GOLDEN_APPLE) > 0 && !offhand.equals(Items.GOLDEN_APPLE)) {
                        InventoryUtil.swapSlots(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Items.GOLDEN_APPLE), OFFHAND);
                    }
                }
            }
            if (mc.player.getHealth( ) + mc.player.getAbsorptionAmount( ) <= totemHP.getVal( )) {
                Item offhand = mc.player.getHeldItemOffhand( ).getItem( );

                if (InventoryUtil.getItemCount(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING) > 0 && !offhand.equals(Items.TOTEM_OF_UNDYING)) {
                    InventoryUtil.swapSlots(mc.player.inventory.currentItem, OFFHAND); //it works too slow and may cause to die
                    InventoryUtil.swapSlots(InventoryUtil.getItemSlot(mc.player.inventoryContainer, Items.TOTEM_OF_UNDYING), OFFHAND);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
}