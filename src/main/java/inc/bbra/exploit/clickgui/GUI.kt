package inc.bbra.exploit.clickgui

import inc.bbra.exploit.BBraExploit
import inc.bbra.exploit.Module.Module
import inc.bbra.exploit.clickgui.modules.ModButton
import inc.bbra.exploit.clickgui.modules.ModCategory
import inc.bbra.exploit.clickgui.modules.Search
import inc.bbra.exploit.clickgui.modules.settings.*
import inc.bbra.exploit.config.ConfigManager
import net.minecraft.client.gui.GuiScreen

object GUI : GuiScreen() {

    var modButtons = mutableListOf<ModButton>()
    var categoryList = mutableListOf<ModCategory>()
    var search = Search.INSTANCE;

    init {
        BBraExploit.logger.info("GUI class initialized")
    }


    override fun initGui() {
        if (categoryList.isEmpty()) {
            categoryList.add(ModCategory(10, 50, Module.Category.CLIENT))
            categoryList.add(ModCategory(140, 50, Module.Category.COMBAT))
            categoryList.add(ModCategory(270, 50, Module.Category.EXPLOIT))
            categoryList.add(ModCategory(400, 50, Module.Category.MISC))
            categoryList.add(ModCategory(530, 50, Module.Category.MOVEMENT))
            categoryList.add(ModCategory(660, 50, Module.Category.PLAYER))
            categoryList.add(ModCategory(790, 50, Module.Category.RENDER))
            ConfigManager.refreshCategories()
            for (j in SettingAbstract.allSettings) {
                j.searchMyButton()
            }
            for (j in PageSetting.pageList) {
                j.searchMyButton()
            }
        }
        super.initGui()
    }

    override fun drawScreen(mouseX: Int, mouseY: Int, partialTicks: Float) {
        drawDefaultBackground()
        ///////////////////////////////////////
        for (i in categoryList) {
            i.draw(mouseX, mouseY, partialTicks)
        }
        for (i in SettingAbstract.allSettings) {
            if (i.button.parentCategoryDeployed && i.module.isDeployed && (i.page == null || i.page == i.module.pages[i.module.pageSeenRN])) { // if deployed and true page
                if (i is FloatSetting) {
                    i.mouseX = mouseX
                }else if (i is IntSetting) {
                    i.mouseX = mouseX
                }
                i.onHover(mouseX, mouseY)
            }
        }
        search.drawSearchText()
        super.drawScreen(mouseX, mouseY, partialTicks)
    }

    override fun doesGuiPauseGame(): Boolean {
        return false
    }

    override fun mouseClicked(mouseX: Int, mouseY: Int, mouseButton: Int) {
        for (i in modButtons) {
            for (p in i.m.pages) {
                if (!i.m.pageSwitched) {
                    p.onClick(mouseX, mouseY, mouseButton)
                }
            }
            i.m.pageSwitched = false;
            if (i.parentCategoryDeployed)
                i.onClick(mouseX, mouseY, mouseButton)
            for (j in i.m.settings) {
                if (j.button.parentCategoryDeployed && j.module.isDeployed && (i.m.pages.isEmpty() || j.page == i.m.pages[i.m.pageSeenRN] || j.page == null)) {
                    when (j) {
                        is BoolSetting -> {
                            j.onClick(mouseX, mouseY, mouseButton)
                        }
                        is ModeSetting -> {
                            j.onClick(mouseX, mouseY, mouseButton)
                        }
                        is FloatSetting -> {
                            j.onMouseClick(mouseX, mouseY, mouseButton)
                        }
                        is IntSetting -> {
                            j.onMouseClick(mouseX, mouseY, mouseButton)
                        }
                    }
                }

            }
        }
        for (i in categoryList) {
            i.onClick(mouseX, mouseY, mouseButton)
        }

        super.mouseClicked(mouseX, mouseY, mouseButton)
    }

    override fun mouseReleased(mouseX: Int, mouseY: Int, state: Int) {
        for (i in categoryList) {
            i.mouseReleased(mouseX, mouseY, state)
        }
        for (i in SettingAbstract.allSettings) {
            if (i is FloatSetting) {
                if (i.button.parentCategoryDeployed && i.module.isDeployed && (i.page == null || i.page == i.module.pages[i.module.pageSeenRN])) { // if deployed and true page
                    i.onMouseRelease(mouseX, mouseY)
                }
            } else if (i is IntSetting) {
                if (i.button.parentCategoryDeployed && i.module.isDeployed && (i.page == null || i.page == i.module.pages[i.module.pageSeenRN])) { // if deployed and true page
                    i.onMouseRelease(mouseX, mouseY)
                }
            }
        }
    }

    override fun keyTyped(typedChar: Char, keyCode: Int) {
        search.onKeyInput(typedChar, keyCode)
        for (i in modButtons) {
            i.keyTyped(typedChar, keyCode)
        }
        super.keyTyped(typedChar, keyCode)
    }

    override fun onGuiClosed() {
        try {
            KeybindCatcher.INSTANCE.isEnabled = false
            ConfigManager.saveCfg()
            super.onGuiClosed()
        } catch (e: Exception) {

        }
    }
}