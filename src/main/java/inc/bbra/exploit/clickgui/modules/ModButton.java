package inc.bbra.exploit.clickgui.modules;

import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.clickgui.GUI;
import inc.bbra.exploit.clickgui.UtilGui;
import inc.bbra.exploit.utils.ChatUtil;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import org.lwjgl.input.Keyboard;

import java.awt.*;
import java.io.IOException;

public class ModButton {
    public int x, y;
    public int w = 90;
    public int h = 20;
    public Module m;
    Minecraft mc = Minecraft.getMinecraft( );
    public boolean binding = false;
    private int bind;
    public boolean parentCategoryDeployed = true;
    public int margin = 1;
    public ModCategory parentCategory;

    public ModButton(int x, int y, Module m) {
        this.x = x;
        this.y = y;
        this.m = m;
        bind = m.keyCode;
        for (ModCategory i : GUI.getINSTANCE( ).getCategoryList( )) {
            if (i.category == m.category) {
                this.parentCategory = i;
            }
        }
    }

    public void updateMyPos(int x, int y) {
        try {
            this.x = x;
            this.y = y;
        } catch (Exception e) {

        }
    }

    public void draw() {
        try {
            if (parentCategoryDeployed) {
                Gui.drawRect(x, y, x + w, y + h, getColor( ));
                //////// Borders
                Gui.drawRect(x - 1, y, x, y + h, getBorderColor( ));//left
                Gui.drawRect(x + w, y, x + w + 1, y + h, getBorderColor( ));//right
                Gui.drawRect(x, y + 1, x + w, y, getBorderColor( ));//top
                Gui.drawRect(x, y + h, x + w, y + h + 1, getBorderColor( ));//bottom
                //////Text & Binding
                if (!binding) {
                    mc.fontRenderer.drawString(m.name, x + 5, y + 5, Color.WHITE.hashCode( ));
                    if (bind != Keyboard.KEY_NONE) {
                        if (Keyboard.getKeyName(m.keyCode).startsWith("NUMPAD")) {  /////////////if key is numpad
                            mc.fontRenderer.drawString(
                                    "[N" + Keyboard.getKeyName(bind).charAt(Keyboard.getKeyName(m.keyCode).length( ) - 1) + "]"
                                    , x + w - 22, y + 6, Color.WHITE.hashCode( ));
                        } else
                            mc.fontRenderer.drawString("[" + Keyboard.getKeyName(bind) + "]", x + w - 20, y + 6, Color.WHITE.hashCode( ));
                    }
                } else {
                    mc.fontRenderer.drawString("...SET KEYBIND...", x + 5, y + 5, Color.WHITE.hashCode( ));
                }
            }
        } catch (Exception e) {

        }
    }

    public boolean isBinding() {
        return this.binding;
    }

    private int getColor() {
        if (binding)
            return new Color(252, 186, 3, 200).hashCode( );
        else if (m.isEnabled( ))
            return new Color(82, 82, 82, 200).hashCode( );
        else
            return new Color(166, 30, 20, 200).hashCode( );
    }

    private int getBorderColor() {
        if (binding)
            return Color.YELLOW.hashCode( );
        else if (m.isEnabled( ))
            return Color.green.hashCode( );
        else
            return Color.red.hashCode( );
    }


    public void onClick(int mouseX, int mouseY, int button) throws IOException {
        if (UtilGui.isClicked(mouseX, mouseY, button, x, y, w, h, UtilGui.MOUSEBUTTON.LEFT)) {
            m.toggle( );
        } else if (UtilGui.isClicked(mouseX, mouseY, button, x, y, w, h, UtilGui.MOUSEBUTTON.MIDDLE)) {
            binding = true;
            GUI.getINSTANCE( ).getSearch( ).somethingIsBinding = binding;
            ChatUtil.sendMessage("somethingIsBinding");
        }

    }

    public void keyTyped(char typedChar, int keyCode) {
        if (binding) {
            if (keyCode != Keyboard.KEY_NONE) {
                if (keyCode == Keyboard.KEY_DELETE) {
                    binding = false;
                    m.keyCode = Keyboard.KEY_NONE;
                    bind = Keyboard.KEY_NONE;
                } else if (keyCode == Keyboard.KEY_LSHIFT) {
                    binding = false;
                } else if (keyCode == Keyboard.KEY_ESCAPE) {
                    binding = false;
                } else {
                    m.keyCode = keyCode;
                    bind = keyCode;
                    binding = false;
                }
            }
        }
        GUI.getINSTANCE( ).getSearch( ).somethingIsBinding = binding;
    }

}
