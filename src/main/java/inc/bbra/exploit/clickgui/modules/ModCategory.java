package inc.bbra.exploit.clickgui.modules;

import inc.bbra.exploit.Client;
import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.clickgui.GUI;
import inc.bbra.exploit.clickgui.UtilGui;
import inc.bbra.exploit.utils.ChatUtil;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;

import java.awt.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;

public class ModCategory {
    Minecraft mc = Minecraft.getMinecraft( );
    public int w = 100;
    public int h = 15;
    public int x, y;
    public int dragX, dragY;
    private int marginY = 0;
    public boolean deployed = true;
    public boolean isDraggingRightNow = false;
    public Module.Category category;
    CopyOnWriteArrayList<Module> modules = Client.modules;
    private ArrayList<Module> modulesInCategory = new ArrayList<Module>( );
    public ArrayList<ModButton> buttons = new ArrayList<ModButton>();

    public ModCategory(int x, int y, Module.Category category) {
        this.category = category;
        this.x = x;
        this.y = y;
        for (Module i : modules) {
            if (i.getCategory( ) == category) {
                modulesInCategory.add(i);
            }
        }
        setChildrens( );

    }

    public void setChildrens() {
        try {
            marginY += 1;
            for (Module i : modulesInCategory) {
                marginY += 1;
                ModButton button = new ModButton(this.x + 5, this.y + this.h + this.marginY, i);
                GUI.getINSTANCE( ).getModButtons( ).add(button);
                this.buttons.add(button);
                marginY += 20 + 1;
            }
            marginY = 0;
        } catch (Exception e) {

        }
    }

    public void deleteChildrens() {
        for (ModButton i : GUI.getINSTANCE( ).getModButtons( )) {
            if (i.parentCategory == this) {
                GUI.getINSTANCE( ).getModButtons( ).remove(i);
            }
        }
    }


    public void onClick(int mouseX, int mouseY, int button) throws IOException {
        try {
            if (UtilGui.isClicked(mouseX, mouseY, button, x, y, w, h, UtilGui.MOUSEBUTTON.RIGHT)) {
                deployed = !deployed;
            } else if (UtilGui.isClicked(mouseX, mouseY, button, x, y, w, h, UtilGui.MOUSEBUTTON.LEFT)) {
                ChatUtil.sendMessage("trying to drag");
//                if (!isDraggingRightNow){
//                    dragStartX = mouseX;
//                    dragStartY = mouseY;
//                    ChatUtil.sendMessage("start cords recorded");
//                }
//                isDraggingRightNow = true;
                drag(mouseX, mouseY);
            }
        } catch (Exception e) {

        }
    }

    private void drag(int mouseX, int mouseY) {
        try {
            dragX = mouseX - x;
            dragY = mouseY - y;
            isDraggingRightNow = true;

        } catch (Exception e) {

        }
    }

    public void mouseReleased(int mouseX, int mouseY, int state) {
        try {
            isDraggingRightNow = false;
        } catch (Exception e) {

        }
    }


    public void draw(int mouseX, int mouseY, float partialTicks) {
        try {
            if (isDraggingRightNow) {
                x = mouseX - dragX;
                y = mouseY - dragY;
                for (ModButton i : this.buttons) {
                    i.updPos(x,y);
                }
                ChatUtil.sendMessage("tried to move");
            }
            Gui.drawRect(x, y, x + w, y + h, new Color(166, 30, 20, 100).hashCode( ));
            //////// Borders
            Gui.drawRect(x - 1, y, x, y + h, Color.BLACK.hashCode( ));//left
            Gui.drawRect(x + w, y, x + w + 1, y + h, Color.BLACK.hashCode( ));//right
            Gui.drawRect(x, y + 1, x + w, y, Color.BLACK.hashCode( ));//top
            Gui.drawRect(x, y + h, x + w, y + h + 1, Color.BLACK.hashCode( ));//bottom
            /////Text
            mc.fontRenderer.drawString(category.name( ), x + 15, y + 4, Color.WHITE.hashCode( ));
        } catch (Exception e) {

        }
    }
}
