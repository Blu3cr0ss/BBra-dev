package inc.bbra.exploit.clickgui.modules;

import inc.bbra.exploit.clickgui.GUI;
import inc.bbra.exploit.clickgui.UtilGui;
import inc.bbra.exploit.utils.ChatUtil;
import net.minecraft.client.Minecraft;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Search {
    public static Search INSTANCE = new Search( );
    public String searchText = "";
    Minecraft mc = Minecraft.getMinecraft( );
    int drawTextX = mc.displayWidth / 2 - mc.fontRenderer.getStringWidth(searchText) / 2;
    int drawTextY = mc.displayHeight - 10;
    boolean somethingIsBinding;


    public void onKeyInput(char typedChar, int keyCode) {
        otherStuffLMAO(somethingIsBinding, keyCode);
    }

    public void otherStuffLMAO(boolean somethingIsBinding, int keyCode) {
        if (!somethingIsBinding) {
            if (UtilGui.getLetters( ).contains(keyCode)) {
                if (keyCode == Keyboard.KEY_SPACE) {
                    searchText += " ";
                } else
                    searchText += Keyboard.getKeyName(keyCode);
            }
        }
        for (ModCategory i : GUI.INSTANCE.getCategoryList( )) {
            if (!somethingIsBinding) {
                if (keyCode == Keyboard.KEY_BACK || keyCode == Keyboard.KEY_ESCAPE) {  // if u wants to erase search text
                    searchText = "";
                }
                i.refreshChildrenMargins(getNewListOfModules(i.buttonsBackup));
            }
        }
    }

    public ArrayList<ModButton> getNewListOfModules(ArrayList<ModButton> buttons) {
        ArrayList<ModButton> filteredButtons = new ArrayList<ModButton>( );
        for (ModButton button : buttons) {
            if (button.m.name.toLowerCase( ).startsWith(searchText.toLowerCase( ))) {
                filteredButtons.add(button);
            }
        }
        return filteredButtons;
    }

    ////////////////////
    public void drawSearchText() {
        if (!searchText.isEmpty( )) {
            mc.fontRenderer.drawString(searchText, drawTextX, drawTextY, Color.WHITE.hashCode( ));
        }
    }
}
