package inc.bbra.exploit.config

import com.google.gson.GsonBuilder
import inc.bbra.exploit.BBraExploit
import inc.bbra.exploit.Client
import inc.bbra.exploit.clickgui.GUI
import inc.bbra.exploit.clickgui.modules.settings.BoolSetting
import inc.bbra.exploit.clickgui.modules.settings.FloatSetting
import inc.bbra.exploit.clickgui.modules.settings.IntSetting
import inc.bbra.exploit.clickgui.modules.settings.ModeSetting
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.json.simple.JSONObject
import org.json.simple.parser.JSONParser
import org.lwjgl.input.Keyboard
import java.io.File
import java.io.FileReader

public object ConfigManager {

    var writer = GsonBuilder().setPrettyPrinting().create()


    var dir = File("BBraExploit/config")
    var file = File(dir, "default.json")

    var moduleList = hashMapOf<String, HashMap<String, String>>()

    fun startup() {
        try {
            BBraExploit.logger.info("ConfigManager init")
            parse()
            refreshModules()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    fun saveCfg() = GlobalScope.launch {
        try {
            makeFile()
            JSONStuff()
            file.writeText(writer.toJson(moduleList))
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    var reader: JSONObject? = null


    fun makeFile() {
        if (!dir.exists()) {
            dir.mkdirs()
        }
        if (!file.exists()) {
            file.createNewFile()
        }
    }

    fun JSONStuff() {
        for (i in Client.modules) {
            updMap(
                i.name, hashMapOf(
                    "enabled" to i.isEnabled.toString(),
                    "bind" to Keyboard.getKeyName(i.key)
                )
            )
            if (i.havePages) {
                updMap(
                    i.name, hashMapOf(
                        "page" to i.pageSeenRN.toString()
                    )
                )
            }
            if (i.haveSettings) {
                for (j in i.settings) {
                    when (j) {
                        is IntSetting -> {
                            updMap(i.name, hashMapOf(j.name to j.`val`.toString().replace(".0", "")))
                        }
                        is FloatSetting -> {
                            updMap(i.name, hashMapOf(j.name to j.`val`.toString()))
                        }
                        is BoolSetting -> {
                            updMap(i.name, hashMapOf(j.name to j.`val`.toString()))
                        }
                        is ModeSetting -> {
                            updMap(i.name, hashMapOf(j.name to j.`val`))
                        }
                    }
                }
            }
        }

        for (i in GUI.categoryList) {
            updMap("CLICK GUI", hashMapOf(i.category.name + " x" to i.x.toString().replace(".0", "")))
            updMap("CLICK GUI", hashMapOf(i.category.name + " y" to i.y.toString().replace(".0", "")))
            updMap("CLICK GUI", hashMapOf(i.category.name + " is deployed" to i.deployed.toString().replace(".0", "")))
        }
    }

    fun updMap(name: String, value: HashMap<String, String>) {
        if (moduleList.containsKey(name)) {
            val valuePrev = moduleList.getValue(name)
            moduleList[name] = (valuePrev + value) as HashMap<String, String>
        } else {
            moduleList[name] = value
        }
    }

    fun parse() {
        reader = JSONParser().parse(FileReader("BBraExploit/config/default.json")) as JSONObject
    }

    fun refreshModules() {
        if (!reader.isNullOrEmpty()) {
            for (module in Client.modules) {
                val moduleSets = reader!![module.name] as HashMap<String, String>
                module.toggled = moduleSets.getValue("enabled") == "true";

                if (moduleSets.getValue("bind") == "NONE") {
                    module.keyCode = Keyboard.KEY_NONE
                } else module.keyCode = Keyboard.getKeyIndex(moduleSets.getValue("bind"))

                if (module.havePages) {
                    module.pageSeenRN = moduleSets.getValue("page").toInt()
                }

                for (s in module.settings) {
                    when (s) {
                        is IntSetting -> {
                            s.value = moduleSets.getValue(s.name).toInt()
                        }
                        is FloatSetting -> {
                            s.value = moduleSets.getValue(s.name).toFloat()
                        }
                        is BoolSetting -> {
                            s.value = moduleSets.getValue(s.name).toBoolean()
                        }
                        is ModeSetting -> {
                            s.modeSeenRN = s.modes.indexOf(moduleSets.getValue(s.name))
                        }
                    }
                }
            }
        }
    }

    fun refreshCategories() {
        val guiSets = reader!!["CLICK GUI"] as HashMap<String, String>
        for (c in GUI.categoryList) {
            c.x = guiSets.getValue("${c.category.name} x").toInt()
            c.y = guiSets.getValue("${c.category.name} y").toInt()
            if (guiSets.getValue("${c.category.name} is deployed") == "true") {
                c.deploy()
            } else c.undeploy()
            BBraExploit.logger.debug("${c.category.name} is on cords ${c.x}, ${c.y} and its ${if (c.deployed) "deployed" else "undeployed"}")
        }
    }
}

