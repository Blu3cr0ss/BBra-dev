package inc.bbra.exploit.utils.other;

import inc.bbra.exploit.BBraExploit;
import inc.bbra.exploit.Client;
import inc.bbra.exploit.Module.Module;
import inc.bbra.exploit.utils.ChatUtil;
import inc.bbra.newclickgui.ClickGuiManager;
import inc.bbra.newclickgui.Setting;
import inc.bbra.newclickgui.component.Frame;
import net.minecraftforge.fml.common.Mod;

import java.io.*;
import java.util.ArrayList;

public class FriendsManager {
    public static boolean doCheck = false;
    private static final ArrayList<String> friends = new ArrayList<>();

    public static void addFriend(String target) throws IOException {
        friends.add(target);
        ConfigManager.saveFriendList();
    }

    public static void removeFriend(String target) throws IOException{
        for (int i = 0;i < friends.size();i++){
            if (friends.get(i) == target){
                friends.remove(i);
            }
        }
        ConfigManager.saveFriendList();
    }

    public static void toggleFriend(String target) throws IOException{
        if (isFriend(target)){
            removeFriend(target);
        } else {
            addFriend(target);
        }
    }
    public static void clearFriends() {
        friends.clear();
    }

    public static boolean isFriend(String target) {
        if(doCheck) {
            for (String friend : friends) {
                if (target == friend) {
                    return true;
                }
            }
        }
        return false;
    }

    public static int getNumFriends(){
        return friends.size();
    }

    public static class ConfigManager {

        public static ArrayList<String> ignoredModules = new ArrayList<>();

        public ConfigManager() throws FileNotFoundException {
        }
        public static void Init() {
            ignoredModules.add("Unload");
            ignoredModules.add("SelfDestruct");
            ignoredModules.add("FakePlayer");
            ignoredModules.add("KeyPearl");
            ignoredModules.add("Music");
            ignoredModules.add("HighJump");
            ignoredModules.add("KillAura");
            ignoredModules.add("CAura");
            try {
                File cfgFile = new File("cfg.txt");
                File setFile = new File("sets.txt");
                File friendFile = new File("friends.txt");
                File guiFile = new File("gui.txt");
                File bindFile = new File("binds.txt");

                if (!cfgFile.exists())
                    cfgFile.createNewFile();
                if (!setFile.exists())
                    setFile.createNewFile();
                if (!friendFile.exists())
                    friendFile.createNewFile();
                if (!guiFile.exists())
                    guiFile.createNewFile();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public static void saveActive() throws IOException {
            File cfgFile = new File("cfg.txt");
            if (cfgFile.exists()) {
                cfgFile.delete();
                cfgFile.createNewFile();
            }
            PrintWriter pw = new PrintWriter(cfgFile);
            for (Module m : Client.modules) {
                if (m.isEnabled() && !ignoredModules.contains(m.getName())) {
                    pw.println(m.getName());
                }
            }
            pw.close();
        }

        public static void loadFromCfg() throws IOException {
            BufferedReader br = new BufferedReader(new FileReader("cfg.txt"));
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    if (!ignoredModules.contains(line))
                        Client.getHackByName(line).activate();
                } catch (Exception e){e.printStackTrace();}
            }
            br.close();
        }

        public static void saveFriendList() throws IOException{
            File friendFile = new File("friends.txt");
            if (friendFile.exists()) {
                friendFile.delete();
                friendFile.createNewFile();
            }
            PrintWriter pw = new PrintWriter(friendFile);
            for (String name : FriendsManager.friends){
                pw.println(name);
            }
            pw.close();
        }

        public static void loadFriendList() throws IOException{
            BufferedReader br = new BufferedReader(new FileReader("friends.txt"));
            String fline;
            while ((fline = br.readLine()) != null) {
                try {
                    FriendsManager.addFriend(fline);
                } catch (Exception e){e.printStackTrace();}
            }
            br.close();
        }

        public static void saveSettings() throws IOException{
            File settingFile = new File("sets.txt");
            if (settingFile.exists()) {
                settingFile.delete();
                settingFile.createNewFile();
            }
            PrintWriter pw = new PrintWriter(settingFile);
            for (Setting setting : BBraExploit.instance.sManager.getSettings()){
                if (setting.isSlider()) {
                    pw.println(setting.getParentMod().getName());
                    pw.println(setting.getName());
                    pw.println(setting.getValDouble());
                }
                else if (setting.isCheck()) {
                    pw.println(setting.getParentMod().getName());
                    pw.println(setting.getName());
                    pw.println(setting.getValBoolean());
                }
                else if (setting.isMode() || setting.isCombo()) {
                    pw.println(setting.getParentMod().getName());
                    pw.println(setting.getName());
                    pw.println(setting.getValString());
                }
            }
            pw.close();
        }
        private static short currentTask = -1;
        private static Module currentModule = null;
        private static Setting currentSetting = null;
        public static void loadSettings() throws IOException{
            BufferedReader br = new BufferedReader(new FileReader("sets.txt"));
            String sline;

            while ((sline = br.readLine()) != null) {
                currentTask++;
                if (currentTask == 0) {
                    currentModule = Client.getHackByName(sline);
                    if (currentModule == null) { ChatUtil.sendMessage("Module " + sline + " wasn't found"); currentTask = -4;}
                }
                if (currentTask == 1) {
                    currentSetting = BBraExploit.instance.sManager.getSettingByName(currentModule.getName(), sline);
                    if (currentSetting == null) { ChatUtil.sendMessage("Setting " + sline + " wasn't found"); currentTask = -4;}
                }
                if (currentTask == 2) {
                    if (currentSetting.isCheck())
                        currentSetting.setValBoolean(Boolean.parseBoolean(sline));
                    if (currentSetting.isMode() || currentSetting.isCombo())
                        currentSetting.setValString(sline);
                    if (currentSetting.isSlider())
                        currentSetting.setValDouble(Double.parseDouble(sline));
                    currentTask = -1;
                    currentModule = null;
                    currentSetting = null;
                }
            }
            br.close();
        }


        public static void saveGuiState() throws IOException{
            File guiFile = new File("gui.txt");
            if (guiFile.exists()) {
                guiFile.delete();
                guiFile.createNewFile();
            }
            PrintWriter pw = new PrintWriter(guiFile);
            for (Frame frame : ClickGuiManager.frames){
                pw.println(frame.category);
                pw.println(frame.getX());
                pw.println(frame.getY());
                pw.println(frame.isOpen());
            }
            pw.close();
        }
        private static Frame currentFrame = null;
        private static short currentTaskG = -1;
        public static void loadGuiState() throws IOException{
            BufferedReader br = new BufferedReader(new FileReader("gui.txt"));
            String gline;

            while ((gline = br.readLine()) != null) {
                currentTaskG++;
                if (currentTaskG == 0) {
                    for (Frame frame : ClickGuiManager.frames){
                        frame.refresh();
                        if (frame.category.name().equalsIgnoreCase(gline)) {
                            currentFrame = frame;
                            break;
                        }
                    }
                    if (currentFrame == null) { ChatUtil.sendMessage("Frame " + gline + " wasn't found"); break;}
                }
                if (currentTaskG == 1) {
                    assert currentFrame != null;
                    currentFrame.setX(Integer.parseInt(gline));
                }
                if (currentTaskG == 2) {
                    assert currentFrame != null;
                    currentFrame.setY(Integer.parseInt(gline));
                }
                if (currentTaskG == 3) {
                    currentFrame.setOpen(Boolean.parseBoolean(gline));
                    currentFrame = null;
                    currentTaskG = -1;
                }
            }
            br.close();
        }

        public static void saveBinds() throws IOException{
            File bindFile = new File("binds.txt");
            if (bindFile.exists()) {
                bindFile.delete();
                bindFile.createNewFile();
            }
            PrintWriter pw = new PrintWriter(bindFile);
            for (Module mod : Client.modules){
                pw.println(mod.getName());
                pw.println(mod.getKey());
            }
            pw.close();
        }
        
        private static Module currentModuleB = null;
        private static short currentTaskB = -1;
        public static void loadBinds() throws IOException{
            BufferedReader br = new BufferedReader(new FileReader("binds.txt"));
            String bline;

            while ((bline = br.readLine()) != null) {
                currentTaskB++;
                if (currentTaskB == 0) {
                    currentModuleB = Client.getHackByName(bline);
                    if (currentModuleB == null) { ChatUtil.sendMessage("Module " + bline + " wasn't found"); currentTaskB = -3;}
                }
                if (currentTaskB == 1) {
                    currentModuleB.setBind(Integer.parseInt(bline));
                    currentModuleB = null;
                    currentTaskB = -1;
                }
            }
            br.close();
        }
    }
}